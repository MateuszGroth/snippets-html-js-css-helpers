// running docker container (basic)

docker pull ubuntu // pull ubuntu image

docker run ubuntu // running base image

docker run -i -t ubuntu  // interactive, sud
(inside ubuntu here)

exit // eit docker

docker ps // show running containers

docker ps -a // show all container (even finished)


docker run ubuntu tail -f /dev/null // run for ever

docker kill <id> // kill docker container by id


// creating docker image with docker file and running container from it

create Dockerfile

FROM scratch/ubuntu

LABEL mateusz groth <matgro@wp.asdas> // optional

RUN apt-get update

CMD ["echo", "Hello world"] // diff between RUN and CMD - RUN executes during build of image and CMD executes when you create contain out of the image

docker build /Users/Mateusz/.../Dockerfile // run docker from dockerfile (with path)

docker build . // run docker from dockerfile (when inside Dockerfile path)

docker build -t myimage .  // name -   myimage


docker run ...

docker images


// another
FROM node:10 AS BUILD_IMAGE

WORKDIR /app

COPY . /app

EXPOSE 8080

RUN npm install && npm run build

FROM node:10

WORKDIR /app

# copy from build image
COPY --from=BUILD_IMAGE /app/dist ./dist
COPY --from=BUILD_IMAGE /app/node_modules ./node_modules

RUN npm i -g http-server

CMD http-server ./dist

// another 

# Use the official image as a parent image.
FROM node:current-slim

# Set the working directory.
WORKDIR /usr/src/app

# Copy the file from your host to your current location.
COPY package.json .

# Run the command inside your image filesystem.
RUN npm install

# Add metadata to the image to describe which port the container is listening on at runtime.
EXPOSE 8080

# Run the specified command within the container.
CMD [ "npm", "start" ]

# Copy the rest of your app's source code from your host to your image filesystem.
COPY . .




// creating docker image from docker container

- create cont first

// first port after -p is the port on your localhost
// second port is what you are exposing from docker

docker create --name kontener -p 80:80 nginx:alpine


// or simply docker create --name ubuntukontener ubuntu

docker start <nazwa> // kontener

// create index.html where you are running the docker and then copy it to docker
docker cp index.html <nazwa>:/usr/share/nginx/html/index.html



docker commit <nazwa> // kontener

docker tag f6a677aeasda moj_nowy_image // tag , name - both custom

// OR 

docker commit <nazwa> moj_nowy_image // nazwa kontenera - kontener, nazwa image, taguje automatycznie

docker stop nginx_base // zatrzymac ten poczatkowy kontener

docker rm nginx_base // usunac poczatkowy


/bin/bash


docker run -i -t --name node_ub ubuntu /bin/bash

docker create -it --name dummy IMAGE_NAME bash
docker cp dummy:/path/to/file /dest/to/file
docker rm -f dummy

##??
docker start  `docker ps -q -l` # restart it in the background
docker attach `docker ps -q -l` # reattach the terminal & stdin

docker start <cont name>
docker attach <conta name>

docker stop <name>

///

create docker image from cmd

docker create -it --name temporary ubuntu
docker start temporary
docker attach temporary
mkdir /app
exit
docker cp ./node temporary:/app
docker cp ./node_modules temporary:/app
docker cp ./index.js temporary:/app

docker commit temporary my_image // temporary - previous image, my_image the desired image


#######OR

docker run --name temp -it ubuntu
apt update
exit
docker commit temp my_image
docker rm -f temp

///

EXPOSE PORT

docker run -p 127.0.0.1:80:8080/tcp -it node_bin_image

///

docker create --name temp -it node_test_flags
docker cp temp:/app/nodejs/out/Release/node ./
docker rm -f temp

///
docker create --name temp -it node_app_empty
docker cp ./node temp:/app
docker start temp
cd app
./node index.js

///

docker create --name temp -it node_app_empty



mozna tez kopiowac pliki bezposrednio do kontenerow

docker run -it ubuntu
potem powstal kontener
> exit
docker container ps -a, sprawdz nazwe kontenera
albo jak: docker run --name nazwa-kontenera -it ubuntu
to juz jest nazwa (nazwa-kontenera)
potem docker cp plik nazwakontenera:/
docker start nazwakontenera
docker attach nazwakontenera

mozna potem img zrobic
docker commit nazwakontenera nazwaimg
